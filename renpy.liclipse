scope_to_color_name: {
 tripleSingleString: string,
 tripleDoubleString: string,
 singleDoubleString: string,
 singleSingleString: string,
 singleBackString: string,

 default: foreground,
 decorator: annotation,
 builtins: annotation,
}
scope_definition_rules:
# Note that the order of the  rules is actually important.
  - {type: EndOfLineRule, scope: singleLineComment, start: '#'}
  - {type: MultiLineRule, scope: tripleSingleString, start: "'''", end: "'''", escapeCharacter: \}
  - {type: MultiLineRule, scope: tripleDoubleString, start: '"""', end: '"""', escapeCharacter: \}
  - {type: MultiLineRule, scope: singleDoubleString, start: '"', end: '"', escapeCharacter: \ }
  - {type: MultiLineRule, scope: singleSingleString, start: "'", end: "'", escapeCharacter: \}
  - {type: MultiLineRule, scope: singleBackString, start: "`", end: "`", escapeCharacter: \}

scope:
  default:
    bracket: ['(', ')', '[', ']', '{', '}']

    operator: [<, '>', '=', +, '-', /, '*', '!', '&', '|', '%', '~', ^, ',']

    keyword: [ KEYWORDS ]

    #builtins (color name: localVariable)
    localVariable: [ PROPERTIES ]

    #Note: we want to define def and class above regardless of using them again later on.
    #In practice, we'll always match sub-rules before the others, so, if we have a match,
    #it'll work anyways.
    sub_rules: [
      # Decorator
      {type: CompositeRule, sub_rules: [
        { type: SequenceRule, scope: decorator, sequence: '@'},
        { type: AnyWordRule, scope: decorator }]
      },
      # Class
      {type: CompositeRule, sub_rules: [
        { type: SequenceRule, scope: keyword, sequence: 'class'},
        { type: OneOrMoreSpacesRule, scope: default},
        { type: AnyWordRule, scope: class }]
      },
      # Method
      {type: CompositeRule, sub_rules: [
        { type: SequenceRule, scope: keyword, sequence: 'def'},
        { type: OneOrMoreSpacesRule, scope: default},
        { type: AnyWordRule, scope: method }]
      },
      {type: CompositeRule, sub_rules: [
        { type: MatchLineStartRule, scope: default},
        { type: ZeroOrMoreSpacesRule, scope: default},
        { type: SequenceRule, scope: keyword, sequence: 'label'},
        { type: OneOrMoreSpacesRule, scope: default},
        { type: AnyWordRule, scope: label }]
      },
      {type: CompositeRule, sub_rules: [
        { type: MatchLineStartRule, scope: default},
        { type: ZeroOrMoreSpacesRule, scope: default},
        { type: SequenceRule, scope: keyword, sequence: 'menu'},
        { type: OneOrMoreSpacesRule, scope: default},
        { type: AnyWordRule, scope: menu }]
      },
      {type: CompositeRule, sub_rules: [
        { type: MatchLineStartRule, scope: default},
        { type: ZeroOrMoreSpacesRule, scope: default},
        { type: SequenceRule, scope: keyword, sequence: 'screen'},
        { type: OneOrMoreSpacesRule, scope: default},
        { type: AnyWordRule, scope: screen }]
      },
      {type: CompositeRule, sub_rules: [
        { type: MatchLineStartRule, scope: default},
        { type: ZeroOrMoreSpacesRule, scope: default},
        { type: SequenceRule, scope: keyword, sequence: 'transform'},
        { type: OneOrMoreSpacesRule, scope: default},
        { type: AnyWordRule, scope: transform }]
      },
      {type: CompositeRule, sub_rules: [
        { type: MatchLineStartRule, scope: default},
        { type: ZeroOrMoreSpacesRule, scope: default},
        { type: SequenceRule, scope: keyword, sequence: 'define'},
        { type: OneOrMoreSpacesRule, scope: default},
        { type: AnyWordRule, scope: define }]
      },

      { type: NumberRule, scope: number},

    ]

file_extensions: [rpy, rpym]
name: RenPy

outline: #Icons: LiClipseParsedItem.getImage(): class, method, comment, attribute (based on 'define')
  - {type: Scope, scope: [default, class], define: class } #scope is a list to identify sub-rule
  - {type: Scope, scope: [default, method], define: method }
  - {type: Scope, scope: [default, label], define: label }
  - {type: Scope, scope: [default, menu], define: menu }
  - {type: Scope, scope: [default, screen], define: screen }
  - {type: Scope, scope: [default, transform], define: transform }
  - {type: Scope, scope: [default, define], define: define }

indent: {
  type: spaces,
  outline_scopes: [ class ],
  spaces_for_tabs: true,
  tab_width: 4,
}

auto_edit:
  - {after: ':', trigger: '\n', action: indent, scope: default} #in a new line, indent after ':'
  - {before: ':', trigger: ':', action: skip, scope: default} #skip ':' if already there
  - {auto_close_scopes: [singleSingleString, singleDoubleString, singleBackString ], scope: default} #To work, the scopes must be: SingleLineRule(sequence used for start/end) or MultiLineRule.
  - {auto_close_parens: ['(', '[', '{'], scope: default} #Will close the parens if it's not properly balanced
  - {auto_skip_parens: [')', ']', '}'], scope: default} #Will skip the close parens if it's properly balanced

comment: {type: singleLine, sequence: '#'}
